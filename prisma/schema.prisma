// Prisma schema â€“ combined models for CloudCurio
datasource db {
  provider = "sqlite" // change to postgresql for prod
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            String   @id @default(cuid())
  name          String?
  email         String?  @unique
  emailVerified DateTime?
  image         String?
  role          String   @default("member")
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  accounts      Account[]
  sessions      Session[]
  subs          Subscription[]
  apiKeys       ApiKey[]
  usage         UsageEvent[]
  scripts       Script[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Subscription {
  id               String   @id @default(cuid())
  userId           String
  stripeSubId      String   @unique
  stripePriceId    String
  status           String
  currentPeriodEnd DateTime
  plan             String
  createdAt        DateTime @default(now() )
  updatedAt        DateTime @updatedAt
  user             User     @relation(fields: [userId], references: [id])
}

model ApiKey {
  id         String   @id @default(cuid())
  userId     String
  name       String
  prefix     String
  hashed     String
  createdAt  DateTime @default(now())
  lastUsedAt DateTime?
  user       User     @relation(fields: [userId], references: [id])
  @@index([userId])
}

model UsageEvent {
  id        String   @id @default(cuid())
  userId    String
  kind      String
  tokensIn  Int      @default(0)
  tokensOut Int      @default(0)
  meta      Json?
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
  @@index([userId, kind, createdAt])
}

// Scripts delivery
model Script {
  id          String   @id @default(cuid())
  slug        String   @unique
  title       String
  description String?
  version     String   @default("0.1.0")
  channel     String   @default("stable")
  content     String
  sha256      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  authorId    String?
  author      User?    @relation(fields: [authorId], references: [id])
  downloads   Int      @default(0)
}

// Repo links + review jobs
model RepoLink {
  id        String   @id @default(cuid())
  provider  String
  owner     String
  repo      String
  branch    String   @default("main")
  token     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ReviewJob {
  id        String   @id @default(cuid())
  repoUrl   String
  status    String   @default("queued")
  resultUrl String?
  meta      Json?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  artifact  ReviewArtifact?
}

model ReviewArtifact {
  id        String   @id @default(cuid())
  job       ReviewJob @relation(fields: [jobId], references: [id])
  jobId     String   @unique
  content   String
  createdAt DateTime @default(now())
}
